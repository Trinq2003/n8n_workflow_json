{
  "name": "Law Inconsistency Checking | Streaming Simulation",
  "nodes": [
    {
      "parameters": {
        "collection": "indexing_subworkflow_log",
        "options": {},
        "query": "={\n  \"file_id\": \"{{ $json.body.fileId }}\"\n}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        220,
        80
      ],
      "id": "489e2468-085b-4ce3-8400-544522279c3b",
      "name": "Indexing File Status",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "5hgD3RXb78qYUD3q",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const isEmpty = (obj) => Object.keys(obj).length === 0;\nif (isEmpty($input.first().json)) {\n  return {\n    'status': \"Indexing\",\n    'message': \"File is waiting for indexing process.\"\n  }\n} else {\n  return {\n  'workflow_type': $input.first().json.log_message.split(\"]\")[0].split(\"[\")[1].split(\" \")[0].toLowerCase()\n};\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        80
      ],
      "id": "a677a89d-a703-47fd-9945-d8e3cb55f562",
      "name": "Workflow Type"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f06e54e4-ac34-40b6-b08e-705125a44c25",
              "leftValue": "={{ $json.workflow_type }}",
              "rightValue": "short",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        -20
      ],
      "id": "acbaa7b7-328d-4684-a377-b00f26c018e2",
      "name": "Long or Short"
    },
    {
      "parameters": {
        "collection": "direct_comparison_log",
        "options": {},
        "query": "={\n  \"file_id\": \"{{ $('Webhook').first().json.body.fileId }}\"\n}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        1140,
        -200
      ],
      "id": "2ba02fbb-d7ca-4112-a47b-0a22a1e4d6b6",
      "name": "Direct Comparison Status",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "5hgD3RXb78qYUD3q",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "collection": "detailed_log",
        "options": {},
        "query": "={\n  \"file_id\": \"{{ $('Webhook').first().json.body.fileId }}\"\n}"
      },
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.1,
      "position": [
        1140,
        180
      ],
      "id": "5a3bd57e-bf50-4409-b250-b8b5b4384585",
      "name": "Detailed Logs Status",
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "5hgD3RXb78qYUD3q",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return {\n  'status': $input.first().json.status,\n  'message': $input.first().json.log_message\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1580,
        20
      ],
      "id": "23a18c9b-0be2-4512-adb5-a356931402bf",
      "name": "Return"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "5a3a9a5c-867e-497b-9065-0e2fa9ddd12f",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -20,
        80
      ],
      "id": "83c85e20-3ceb-46cc-8cc3-2b456a8ebdab",
      "name": "Webhook",
      "webhookId": "5a3a9a5c-867e-497b-9065-0e2fa9ddd12f"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2200,
        420
      ],
      "id": "fa4e0232-3e49-437a-9a83-1eff0d5f942c",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "const isEmpty = (obj) => Object.keys(obj).length === 0;\nif (isEmpty($input.first().json)) {\n  return {\n    'status': \"Indexing\",\n    'log_message': \"File is waiting for indexing process.\"\n  }\n}\n\nconst list_of_stages = $input.all().map(item => item.json);\nlet num_of_retrieved_laws = 0;\nvar status_str = \"\";\n\nif (list_of_stages.length === 0) {\n  return {status: \"Indexing\", log_message: \"Tài liệu đang được xử lý\"};\n}\n\nfor (const stage of list_of_stages) {\n  if (stage.hasOwnProperty(\"retrieved_chunks\")) {\n    num_of_retrieved_laws = stage.retrieved_chunks.length;\n    var status_log = \"\";\n    status_log += `[TRẠNG THÁI] Đang truy vấn trong các bộ luật hiện hành...\\n`;\n    status_log += `Đã tìm thấy ${num_of_retrieved_laws} điều luật\\n`;\n    status_log += `Nội dung các điều luật như sau:\\n`;\n    status_log += `${stage.retrieved_chunks.map((item, index)=>`Điều luật số ${index+1}.\\n=================\\n${item.content}\\n=================`).join(\"\\n\")}`;\n    status_str = \"Retrieval\";\n  }\n\n  if (stage.hasOwnProperty(\"filtered_chunks\")) {\n    const num_of_filtered_laws = stage.filtered_chunks.length;\n    var status_log = \"\";\n    status_log += `[TRẠNG THÁI] Đang lọc các điều luật đã được truy vấn...\\n`;\n    status_log += `Đã chọn ${num_of_filtered_laws} trên tổng số  ${num_of_retrieved_laws} điều luật được truy vấn\\n`;\n    status_log += `Nội dung các điều luật như sau:\\n`;\n    status_log += `${stage.filtered_chunks.map((item, index)=>`Điều luật số ${index+1}.\\n=================\\n${item.chunk_content}\\n=================`).join(\"\\n\")}`;\n    status_str = \"Filtering\";\n  }\n\n  if (stage.hasOwnProperty(\"answer_analyzing\")) {\n    var status_log = \"\";\n    status_log += `[TRẠNG THÁI] Đang phân tích mâu thuẫn giữa luật dự thảo và luật hiện hành...\\n`;\n    status_log += `Nội dung phân tích như sau:\\n`;\n    status_log += `${stage.answer_analyzing.map((item, index)=>`Điều luật số ${index+1}.\\n=================\\n${item.official_law}\\n=================\\Mâu thuẫn tiềm tàng: ${item.potential_conflict}\\nLí do: ${item.reason}`).join(\"\\n\")}`;\n    status_str = \"Answer analyzing\";\n  }\n}\n\nreturn {status: status_str, log_message: status_log};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        -200
      ],
      "id": "9afa9a7d-6f5e-4350-86cc-f006b93fd1f6",
      "name": "DC Verbalization"
    },
    {
      "parameters": {
        "jsCode": "const isEmpty = (obj) => Object.keys(obj).length === 0;\nif (isEmpty($input.first().json)) {\n  return {\n    'status': \"Indexing\",\n    'log_message': \"File is waiting for indexing process.\"\n  }\n}\n\nconst list_of_stages = $input.all().map(item => item.json);\nlet num_of_retrieved_laws = 0;\nvar status_str = \"\";\n\nif (list_of_stages.length === 0) {\n  return {status: \"Indexing\", log_message: \"Tài liệu đang được xử lý\"};\n}\n\nfor (const stage of list_of_stages) {\n  if (stage.hasOwnProperty(\"related_chunks\")) {\n    num_of_retrieved_laws = stage.related_chunks.length;\n    var status_log = \"\";\n    status_log += `[TRẠNG THÁI] Đang truy vấn trong các bộ luật hiện hành...\\n`;\n    status_log += `Đã tìm thấy ${num_of_retrieved_laws} điều luật\\n`;\n    status_log += `Nội dung các điều luật như sau:\\n`;\n    status_log += `${stage.related_chunks.map((item, index)=>`Điều luật số ${index+1}.\\n=================\\n${item.content}\\n=================`).join(\"\\n\")}`;\n    status_str = \"Retrieval\";\n  }\n\n  if (stage.hasOwnProperty(\"conflict_questions\")) {\n    const num_of_conflict_questions = stage.conflict_questions.length;\n    var status_log = \"\";\n    status_log += `[TRẠNG THÁI] Đang sinh ra các câu hỏi tình huống...\\n`;\n    status_log += `Đã sinh ra ${num_of_conflict_questions} câu hỏi tình huống\\n`;\n    status_log += `Nội dung các câu hỏi như sau:\\n`;\n    status_log += `${stage.conflict_questions.map((item, index)=>`Câu hỏi số ${index+1}.\\n=================\\nCâu hỏi: ${item.question}\\nSuy diễn: ${item.reason}\\n=================`).join(\"\\n\")}`;\n    status_str = \"Conflict question generation\";\n  }\n\n  if (stage.hasOwnProperty(\"refined_questions\")) {\n    var status_log = \"\";\n    status_log += `[TRẠNG THÁI] Đang tinh chỉnh và cải thiện câu hỏi tình huống...\\n`;\n    status_log += `Nội dung phân tích như sau:\\n`;\n    status_log += `${stage.refined_questions.map((item, index)=>`Câu hỏi số ${index+1}.\\n=================\\nCâu hỏi: ${item.rewritten_question}\\nSuy diễn: ${item.rewritten_reason}\\n=================`).join(\"\\n\")}`;\n    status_str = \"Refining conflict questions\"\n  }\n\n  if (stage.hasOwnProperty(\"debate_context\")) {\n    var status_log = \"\";\n    const num_of_debate_rounds = stage.debate_context.length;\n    status_log += `[TRẠNG THÁI] Đang phản biện dựa trên nội dung được cung cấp...\\nCó tổng cộng ${num_of_debate_rounds} vòng phản biện. Nội dung của các vòng như sau:\\n`;\n    status_log += `${stage.debate_context.map((item, index)=>`Lượt số  ${index+1}.\\n=================\\nLuật dự thảo: ${item.proposal_law}\\nCâu hỏi tình huống: ${item.question}\\nLí luận: ${item.reason}\\nNội dung liên quan: ${item.relevant_context}\\n=================`).join(\"\\n\")}`;\n    status_str = \"Debating\";\n  }\n\n  if (stage.hasOwnProperty(\"proposal_answer\")) {\n    var status_log = \"\";\n    status_log += `[TRẠNG THÁI] Đang sinh câu trả lời dựa trên luật dự thảo...\\n`;\n    status_log += `${stage.proposal_answer.map((item, index)=>`Câu hỏi số  ${index+1}.\\n=================\\nCâu trả lời: ${item.answer}\\nLí luận: ${item.reason}\\nCó khả năng vi phạm không: ${item.violate}\\n=================`).join(\"\\n\")}`;\n    status_str = \"Answering on proposal laws\";\n  }\n\n  if (stage.hasOwnProperty(\"context_answer\")) {\n    var status_log = \"\";\n    status_log += `[TRẠNG THÁI] Đang sinh câu trả lời dựa trên luật hiện hành...\\n`;\n    status_log += `${stage.context_answer.map((item, index)=>`Câu hỏi số  ${index+1}.\\n=================\\nCâu trả lời: ${item.answer}\\nLí luận: ${item.reason}\\nCó khả năng vi phạm không: ${item.violate}\\n=================`).join(\"\\n\")}`;\n    status_str = \"Answering on official laws\";\n  }\n}\n\nreturn {status: status_str, log_message: status_log}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        180
      ],
      "id": "3c0cbdee-fc6b-4a6b-9811-745f4dcf8e0a",
      "name": "DL Verbalization",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "56b19638-045f-460e-8d8e-a51b5639d4f8",
              "leftValue": "={{ $json.workflow_type }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        660,
        80
      ],
      "id": "8ff2001e-7180-440b-99c1-54f2f78258e6",
      "name": "If"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "content-type": "application/json",
            "user-agent": "PostmanRuntime/7.43.3",
            "accept": "*/*",
            "postman-token": "f88114f6-2689-4b2f-ae38-ad6015f5d83f",
            "host": "localhost:8080",
            "accept-encoding": "gzip, deflate, br",
            "connection": "keep-alive",
            "content-length": "54"
          },
          "params": {},
          "query": {},
          "body": {
            "fileId": "9c4074181bac11f0913c0242c0a8e007"
          },
          "webhookUrl": "http://localhost:5678/webhook/5a3a9a5c-867e-497b-9065-0e2fa9ddd12f",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Indexing File Status": {
      "main": [
        [
          {
            "node": "Workflow Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Type": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Long or Short": {
      "main": [
        [
          {
            "node": "Direct Comparison Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Detailed Logs Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Direct Comparison Status": {
      "main": [
        [
          {
            "node": "DC Verbalization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detailed Logs Status": {
      "main": [
        [
          {
            "node": "DL Verbalization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Indexing File Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DC Verbalization": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DL Verbalization": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Long or Short",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c2f109c3-2dba-49a4-84f1-c3a6280d6e22",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d8c8372ef7a659c4f0fd0d493f164dce23076499176f8e625c9ee5f99c7551e5"
  },
  "id": "whjaVUCp2G21Pe9c",
  "tags": [
    {
      "createdAt": "2025-04-14T09:30:46.031Z",
      "updatedAt": "2025-04-14T09:30:46.031Z",
      "id": "8J6ldlcSlbTT8IXk",
      "name": "Trinq"
    },
    {
      "createdAt": "2025-04-14T09:30:52.291Z",
      "updatedAt": "2025-04-14T09:30:52.291Z",
      "id": "kpNxjymercZpqEZB",
      "name": "Published"
    }
  ]
}