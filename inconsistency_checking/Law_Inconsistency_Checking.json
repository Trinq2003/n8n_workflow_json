{
  "name": "Law Inconsistency Checking",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.48.1:8000/api/v1/retrieval",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "question",
              "value": "={{ $json.chatInput }}"
            },
            {
              "name": "dataset_ids",
              "value": "={{ ['9335bdec0d1a11f0a5bc0242c0a8e007'] }}"
            },
            {
              "name": "similarity_threshold",
              "value": "0.2"
            },
            {
              "name": "vector_similarity_weight",
              "value": "0.5"
            },
            {
              "name": "top_k",
              "value": "10"
            },
            {
              "name": "page_size",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "id": "f488f6f0-24bc-4208-b04f-2ae79b6d2cd4",
      "name": "Retrieve From RAGFlow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        460
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "BsiYDBYhVfKwEyaP",
          "name": "RAGFlow Authentication"
        }
      }
    },
    {
      "parameters": {
        "model": "qwen-2.5-32b",
        "options": {
          "temperature": 0.7
        }
      },
      "id": "f088a6b5-f1f9-4249-aaed-0e8e65b28f9e",
      "name": "Groq Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        660,
        1340
      ],
      "credentials": {
        "groqApi": {
          "id": "mqYzsdi19fdt2j3W",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "var related_chunks = [];\nfor (let i=0; i<$input.all().length; i++) {\n  if ($input.all()[i].json.response.text === \"related\") {\n    chunk = $('Retrieve From RAGFlow').all()[0].json.data.chunks[i];\n    related_chunks.push(\n      {\n        'dataset_id': chunk.dataset_id,\n        'document_id': chunk.document_id,\n        'chunk_id': chunk.id,\n        'keywords': chunk.important_keywords,\n        'content': chunk.content\n      }\n    );\n  } \n}\n\nreturn related_chunks;"
      },
      "id": "ac8bcc36-db88-4f7a-80ba-889197e9684a",
      "name": "Filter Retrieved Chunks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        460
      ]
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"question\": {\n        \"type\": \"string\"\n      },\n      \"reason\": {\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"question\", \"reason\"],\n    \"additionalProperties\": false\n  }\n}"
      },
      "id": "b14455a0-52aa-4a4b-8d4d-c869b3723299",
      "name": "Potential Conflicts",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        360,
        960
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "01089fcb-9cb8-4375-b688-cfec6187c811",
      "name": "User Query",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        260,
        460
      ],
      "webhookId": "b1510c34-4ea0-4d44-9d56-9db6377116fa"
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.output;"
      },
      "id": "0b6806ad-69f6-46ca-a96e-a31c7baca99f",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        740
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_llaw>\n\n<relevant_context>\n{{ $json.content }}\n</relevant_context>",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Imagine that you are an expert in law inconsistency checking. You are given a proposal law and relevant context (the past official laws), which are both in Vietnamese. Your task is to generate 10 potential conflicts in the form of questions to the given proposal law. Please think step by step.\n\n<output>\nOutput in JSON format, specified as follows:\n```json\n[{\n  \"question\": # Your questions to indicate the potential conflicts in Vietnamese,\n  \"reason\": # The reason why this question may cause conflicts in Vietnamese, step by step and be as concise as possible.\n}]\n```\n</output>"
            }
          ]
        }
      },
      "id": "3d059064-7b1e-4880-a04f-27f8165e18e9",
      "name": "CoT Potential Conflicts Generation",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        240,
        740
      ]
    },
    {
      "parameters": {
        "options": {
          "separator": "\\n"
        }
      },
      "id": "d134d64a-f107-42eb-83a5-fe7e42524e2c",
      "name": "Item List Output Parser1",
      "type": "@n8n/n8n-nodes-langchain.outputParserItemList",
      "typeVersion": 1,
      "position": [
        1180,
        1320
      ]
    },
    {
      "parameters": {
        "options": {
          "numberOfItems": 5,
          "separator": "\\n"
        }
      },
      "id": "70eb1785-e14b-400b-a1a4-0420a52080a6",
      "name": "Retrieval Decide",
      "type": "@n8n/n8n-nodes-langchain.outputParserItemList",
      "typeVersion": 1,
      "position": [
        900,
        640
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>"
      },
      "id": "c833e3d0-1c0f-4e8b-bd44-b59ff42a98ad",
      "name": "Refine 1",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        1240,
        740
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=As a legal expert and commentator on Vietnamese laws, your role is to provide constructive feedback on proposed legislation. \n\n<instruction>\n1. You are given a proposal law, the relevant context (from the official laws), a question to raise potential conflicts caused by the proposed law on the relevant context, and possible reasons that can lead to the conflicts.\n2. Your task involves analyzing a proposed law, its relevant legal context, a question that highlights potential conflicts, and the reasons behind those conflicts:\n- Relevant: Ensure the question and reasons are directly related to the proposed law and its context.\n- Informative: The question and reasons should reflect real and logical conflicts within the relevant legal framework.\n- Consistency: Avoid introducing new concepts or ideas that are not present in the proposal or relevant laws.\n- Specificity: Focus on concrete issues rather than abstract concepts, addressing the main points directly.\n</instruction>\n\n<output>\nGo directly to the feedback without any introduction. Be as concise as possible.\n</output>"
            }
          ]
        }
      },
      "id": "3032a023-ef89-4324-87a2-d1cd74aeb8f3",
      "name": "Feedback 1",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        880,
        740
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<query>\n{{ $('User Query').item.json.chatInput }}\n</query>\n\n<context>\n{{ $json.data.chunks.slice(0, 5).map(item => \"- \" + item.content + \"\\n\") }}\n</context>",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=As an expert Vietnamese lawyer, your task is to determine which law applies to a specific query. You need to ensure that the laws you consider are consistent.\n<instruction>\nYou will be provided with a query and a list of five relevant contexts (all written in Vietnamese). Carefully read through each context and decide whether it is directly relevant to the query.\n</instruction>\n<output>\nYour output should indicate \"related\" or \"unrelated\" for each context, with each response on a separate line.\n</output>\n"
            },
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=<query>\nTrường hợp ngang nhau thì bên có ý kiến của Chủ tịch Hội sẽ được chấp thuận. 3. Ban Chấp hành có nhiệm vụ và quyền hạn sau đây: a) Quyết định các biện pháp thực hiện nghị quyết, chương trình hoạt động trong nhiệm kỳ của Đại hội; b) Quyết định chương trình, kế hoạch công tác hàng năm hoặc giữa các kỳ họp của Ban Chấp hành; c) Thông qua kế hoạch và quyết toán tài chính nhiệm kỳ và hàng năm của Hội;\n</query>\n\n<context>\n- V. Hồ sơ, gồm: Điều 14. Ban Chấp hành Hội (hoặc tên gọi khác) 3. Nguyên tắc hoạt động của Ban Chấp hành: d) Các nghị quyết, quyết định của Ban Chấp hành được thông qua khi có trên ... tổng số ủy viên Ban Chấp hành dự họp biểu quyết tán thành. Trong trường hợp số ý kiến tán thành và không tán thành ngang nhau thì quyết định thuộc về bên có ý kiến của Chủ tịch Hội. Điều 15. Ban Thường vụ Hội (hoặc tên gọi khác) 1. Ban Thường vụ Hội do Ban Chấp hành bầu trong số các ủy viên Ban Chấp hành; Ban Thường vụ Hội gồm: Chủ tịch, các Phó Chủ tịch và các ủy viên. Số lượng, cơ cấu, tiêu chuẩn ủy viên Ban Thường vụ do Ban Chấp hành quyết định. Nhiệm kỳ của Ban Thường vụ cùng với nhiệm kỳ Đại hội. 2. Nhiệm vụ và quyền hạn của Ban Thuờng vụ:\n- Điều 13. Ban Chấp hành Trung ương Hội 2. Ban Chấp hành hoạt động theo Quy chế và Điều lệ Hội. Ban Chấp hành họp thường kỳ mỗi năm một lần; khi cần thiết có thể họp bất thường. Các quyết định, nghị quyết của Ban Chấp hành được thông qua và có hiệu lực khi có trên 50% tổng số ủy viên chính thức dự họp tán thành. Trường hợp ngang nhau thì bên có ý kiến của Chủ tịch Hội sẽ được chấp thuận. 3. Ban Chấp hành có nhiệm vụ và quyền hạn sau đây: a) Quyết định các biện pháp thực hiện nghị quyết, chương trình hoạt động trong nhiệm kỳ của Đại hội; b) Quyết định chương trình, kế hoạch công tác hàng năm hoặc giữa các kỳ họp của Ban Chấp hành; c) Thông qua kế hoạch và quyết toán tài chính nhiệm kỳ và hàng năm của Hội;\n- Điều 14. Ban Chấp hành Hội 4. Nguyên tắc hoạt động của Ban Chấp hành: d) Các nghị quyết, quyết định của Ban Chấp hành được thông qua khi có trên 1/2 (một phần hai) tổng số ủy viên Ban Chấp hành tham gia dự họp biểu quyết tán thành. Trường hợp số ý kiến tán thành và không tán thành ngang nhau thì quyết định thuộc về bên có ý kiến của Chủ tịch Hội. Điều 15. Ban Thường vụ Hội 1. Ban Thường vụ Hội do Ban Chấp hành bầu trong số các ủy viên Ban Chấp hành; Ban Thường vụ Hội gồm: Chủ tịch, các Phó Chủ tịch, Tổng thư ký và các ủy viên. Số lượng, cơ cấu, tiêu chuẩn ủy viên Ban Thường vụ do Ban Chấp hành Hội quyết định. Nhiệm kỳ của Ban Thường vụ cùng với nhiệm kỳ Đại hội. 2. Nhiệm vụ, quyền hạn của Ban Thường vụ:\n- V. Hồ sơ, gồm: Điều 14. Ban Chấp hành Hội (hoặc tên gọi khác) 3. Nguyên tắc hoạt động của Ban Chấp hành: d) Các nghị quyết, quyết định của Ban Chấp hành được thông qua khi có trên ... tổng số ủy viên Ban Chấp hành dự họp biểu quyết tán thành. Trong trường hợp số ý kiến tán thành và không tán thành ngang nhau thi quyết định thuộc về bên có ý kiến của Chủ tịch Hội. Điều 15. Ban Thường vụ Hội (hoặc tên gọi khác) 1- Ban Thường vụ Hội do Ban Chấp hành bầu trong số các ủy viên Ban Chấp hành; Ban Thường vụ Hội gồm: Chủ tịch, các Phó Chủ tịch và các ủy viên, số lượng, cơ cấu, tiêu chuẩn ủy viên Ban Thường vụ do Ban Chấp hành quyết định. Nhiệm kỳ của Ban Thường vụ cùng với nhiệm kỳ Đại hội. 2. Nhiệm vụ và quyền hạn của Ban Thường vụ:\n- Điều 14. Ban Chấp hành Hội 4. Nguyên tắc hoạt động của Ban Chấp hành: b) Các cuộc họp của Ban Chấp hành được xem là hợp lệ khi có 2/3 (hai phần ba) số lượng ủy viên Ban Chấp hành tham gia dự họp. Ban Chấp hành biểu quyết theo nguyên tắc quá bán, thiểu số phục tùng đa số. Trong trường hợp biểu quyết ngang nhau thì quyết định thuộc về bên có ý kiến của Chủ tịch Hội hoặc người chủ trì hội nghị. Ban Chấp hành có thể biểu quyết bằng hình thức giơ tay hoặc bỏ phiếu kín. Việc quy định hình thức biểu quyết họp Ban Chấp hành do Ban Chấp hành Hội quyết định; c) Giữa hai kỳ họp Ban Chấp hành để quyết định các vấn đề thuộc thẩm quyền của Ban Chấp hành có thể hội ý, thảo luận, thông qua lấy ý kiến bằng văn bản;\n</context>"
            },
            {
              "type": "AIMessagePromptTemplate",
              "message": "=related\nunrelated\nrelated\nrelated\nunrelated"
            }
          ]
        }
      },
      "id": "23e35188-0977-47b5-86d3-11c06f945157",
      "name": "Decide Relevant Content",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        700,
        460
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=As a legal expert and commentator on Vietnamese laws, your role is to provide constructive feedback on proposed legislation. \n\n<instruction>\n1. You are given a proposal law, the relevant context (from the official laws), a question to raise potential conflicts caused by the proposed law on the relevant context, and possible reasons that can lead to the conflicts.\n2. Your task involves analyzing a proposed law, its relevant legal context, a question that highlights potential conflicts, and the reasons behind those conflicts:\n- Relevant: Ensure the question and reasons are directly related to the proposed law and its context.\n- Informative: The question and reasons should reflect real and logical conflicts within the relevant legal framework.\n- Consistency: Avoid introducing new concepts or ideas that are not present in the proposal or relevant laws.\n- Specificity: Focus on concrete issues rather than abstract concepts, addressing the main points directly.\n</instruction>\n\n<output>\nGo directly to the feedback without any introduction. Be as concise as possible.\n</output>"
            }
          ]
        }
      },
      "id": "99a98c0b-a75d-47ea-af8a-9b033e928526",
      "name": "Feedback  2",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        880,
        940
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>"
      },
      "id": "2f4696cb-b785-4317-b957-d0570962e5b4",
      "name": "Refine 2",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        1240,
        940
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=As a legal expert and commentator on Vietnamese laws, your role is to provide constructive feedback on proposed legislation. \n\n<instruction>\n1. You are given a proposal law, the relevant context (from the official laws), a question to raise potential conflicts caused by the proposed law on the relevant context, and possible reasons that can lead to the conflicts.\n2. Your task involves analyzing a proposed law, its relevant legal context, a question that highlights potential conflicts, and the reasons behind those conflicts:\n- Relevant: Ensure the question and reasons are directly related to the proposed law and its context.\n- Informative: The question and reasons should reflect real and logical conflicts within the relevant legal framework.\n- Consistency: Avoid introducing new concepts or ideas that are not present in the proposal or relevant laws.\n- Specificity: Focus on concrete issues rather than abstract concepts, addressing the main points directly.\n</instruction>\n\n<output>\nGo directly to the feedback without any introduction. Be as concise as possible.\n</output>"
            }
          ]
        }
      },
      "id": "49b6f8c5-33fe-45b0-97e5-2eebc4217d08",
      "name": "Feedback  3",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        880,
        1140
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>"
      },
      "id": "66d60c65-3e9a-4753-9c8f-ff570c95f9d6",
      "name": "Refine 3",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        1240,
        1140
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "ea136e5d-fa57-4dcd-9567-16f54e96b17d",
      "name": "Debate 1.1",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        1720,
        1140
      ]
    },
    {
      "parameters": {},
      "id": "65b63fa9-4cea-4d3f-8af2-001cc4186a99",
      "name": "Debate Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2020,
        1860
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "2a3d63ba-31e0-4834-b3ed-4859d5a977e9",
      "name": "Debate 1.2",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        1720,
        1340
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "1603fd03-bf23-4dce-aaf1-13092c4d228c",
      "name": "Debate 1.3",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        1720,
        1560
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "fba2692b-cf79-41aa-8223-e6e042174ef3",
      "name": "Groq Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        540,
        960
      ],
      "credentials": {
        "groqApi": {
          "id": "mqYzsdi19fdt2j3W",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "model": "qwen-2.5-32b",
        "options": {
          "temperature": 0.7
        }
      },
      "id": "6cddb39c-7a44-42d9-9909-cbfd97ae308a",
      "name": "Groq Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2360,
        1860
      ],
      "credentials": {
        "groqApi": {
          "id": "mqYzsdi19fdt2j3W",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "5e690062-8a6c-43d5-ad66-a545bae128a9",
      "name": "Debate 2.1",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        2100,
        1140
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "afb7b4a3-100e-4fc3-a7fa-2ec65f6bfad8",
      "name": "Debate 2.2",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        2100,
        1340
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "346113f4-49e4-44a5-b1cb-a7f6dbe2afda",
      "name": "Debate 2.3",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        2100,
        1560
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "6c6a332a-0be5-4299-b6d7-c52222e5c1e3",
      "name": "Debate 3.1",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        2500,
        1140
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "060bf045-30eb-4c7f-a41f-0d4b8484ecbf",
      "name": "Debate 3.2",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        2500,
        1340
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<proposal_law>\n{{ $('User Query').first().json.chatInput }}\n</proposal_law>\n\n<relevant_context>\n{{ $('Filter Retrieved Chunks').item.json.content.trim() }}\n</relevant_context>\n\n<question>\n{{ $json.question }}\n</question>\n\n<reason>\n{{ $json.reason }}\n</reason>\n\n<feedback>\n\n</feedback>",
        "hasOutputParser": true
      },
      "id": "f7215209-043f-48fb-9420-939732c58d70",
      "name": "Debate 3.3",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        2500,
        1560
      ]
    },
    {
      "parameters": {},
      "id": "c596ddf0-0e62-4b93-a319-907d1a81e5d8",
      "name": "Self-Consistency",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.4,
      "position": [
        2880,
        1560
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "7da4d784-7740-47a8-b642-ae48b60220e2",
      "name": "Groq Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2900,
        1840
      ],
      "credentials": {
        "groqApi": {
          "id": "mqYzsdi19fdt2j3W",
          "name": "Groq account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Retrieve From RAGFlow": {
      "main": [
        [
          {
            "node": "Decide Relevant Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Feedback 1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Refine 1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Feedback  2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Feedback  3",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Refine 2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Refine 3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Filter Retrieved Chunks": {
      "main": [
        [
          {
            "node": "CoT Potential Conflicts Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Potential Conflicts": {
      "ai_outputParser": [
        [
          {
            "node": "CoT Potential Conflicts Generation",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "User Query": {
      "main": [
        [
          {
            "node": "Retrieve From RAGFlow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Feedback 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CoT Potential Conflicts Generation": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieval Decide": {
      "ai_outputParser": [
        [
          {
            "node": "Decide Relevant Content",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Item List Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Feedback 1",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Feedback  2",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Feedback  3",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Feedback 1": {
      "main": [
        [
          {
            "node": "Refine 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decide Relevant Content": {
      "main": [
        [
          {
            "node": "Filter Retrieved Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refine 1": {
      "main": [
        [
          {
            "node": "Feedback  2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback  2": {
      "main": [
        [
          {
            "node": "Refine 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refine 2": {
      "main": [
        [
          {
            "node": "Feedback  3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Feedback  3": {
      "main": [
        [
          {
            "node": "Refine 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refine 3": {
      "main": [
        [
          {
            "node": "Debate 1.1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debate 1.1": {
      "main": [
        [
          {
            "node": "Debate 1.2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debate Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Debate 1.1",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Debate 1.3",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Debate 1.2",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Debate 2.1",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Debate 2.2",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Debate 2.3",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Debate 3.3",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Debate 3.2",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Debate 3.1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Debate 1.2": {
      "main": [
        [
          {
            "node": "Debate 1.3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Decide Relevant Content",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "CoT Potential Conflicts Generation",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Debate 1.1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Debate 2.1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Debate 1.2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Debate 2.2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Debate 1.3",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Debate 2.3",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Debate 3.3",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Debate 3.2",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Debate 3.1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Debate 2.1": {
      "main": [
        [
          {
            "node": "Debate 2.2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debate 1.3": {
      "main": [
        [
          {
            "node": "Debate 2.1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debate 2.2": {
      "main": [
        [
          {
            "node": "Debate 2.3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debate 2.3": {
      "main": [
        [
          {
            "node": "Debate 3.1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debate 3.1": {
      "main": [
        [
          {
            "node": "Debate 3.2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debate 3.2": {
      "main": [
        [
          {
            "node": "Debate 3.3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debate 3.3": {
      "main": [
        [
          {
            "node": "Self-Consistency",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Self-Consistency",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6edfa21a-2185-4750-ae4f-75df8b3e2c36",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d8c8372ef7a659c4f0fd0d493f164dce23076499176f8e625c9ee5f99c7551e5"
  },
  "id": "DF9ZP97ZVL5jLkNp",
  "tags": []
}